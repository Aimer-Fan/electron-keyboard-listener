import {
  app, BrowserWindow, ipcMain,
} from 'electron';
import { GlobalKeyboardListener } from 'node-global-key-listener';
import {
  IpcSwitchDatabaseFilename,
  IpcClearData, IpcGetDatabaseFilename, IpcGetRankData,
  IpcKeyboardEvent, IpcRestartApp, IpcSaveDatabaseFilename,
} from './constant';
import KeyboardDataManager from './KeyboardDataManager';
import { clearData } from './store';
import {
  handleGetDatabaseFilename, handleIpcSwitchDatabaseFilename,
  handleIpcGetRankData, handleIpcSaveDatabaseFilename,
} from './IpcMainHandlers';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow;
let globalKeyBoardListener: GlobalKeyboardListener;
let registeredIpcMainHandler = false;

// clear store data in development mode
if (!app.isPackaged) {
  clearData();
}

const keyboardDataManager = new KeyboardDataManager();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line global-require
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 916,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // if keyboard listener is not exist, should instance it
  if (!globalKeyBoardListener) {
    globalKeyBoardListener = new GlobalKeyboardListener();
    globalKeyBoardListener.addListener((e) => {
      if (e.state === 'DOWN') {
        const data = { name: e.name };
        keyboardDataManager.append(data);
      }
      // if have mainWindow, tell renderer draw
      if (mainWindow) {
        mainWindow.webContents.send(IpcKeyboardEvent, e);
      }
    });
  }

  // register ipc man handlers
  if (!registeredIpcMainHandler) {
    ipcMain.handle(IpcGetRankData, (e, data) => handleIpcGetRankData(e, data, keyboardDataManager));
    ipcMain.handle(IpcClearData, async () => keyboardDataManager.clearData());
    ipcMain.handle(IpcGetDatabaseFilename, handleGetDatabaseFilename);
    ipcMain.handle(IpcSwitchDatabaseFilename, (e, data) => handleIpcSwitchDatabaseFilename(e, data, mainWindow));
    ipcMain.handle(IpcSaveDatabaseFilename, handleIpcSaveDatabaseFilename);
    ipcMain.handle(IpcRestartApp, () => {
      app.relaunch();
      app.exit();
    });
    registeredIpcMainHandler = true;
  }

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (!app.isPackaged) {
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    keyboardDataManager.dispose();
    app.quit();
  }
  console.log('window-all-closed');
  mainWindow = undefined;
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
